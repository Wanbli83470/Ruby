Pour exécuter du code Ruby directement dans votre console,  il vous faut utiliser la console Ruby appelée IRB (Interactive Ruby)  en tapant la commande suivante : 

irb
Ensuite, tapez la commande Ruby que vous souhaitez. 

Une variable est une sorte de "boîte" dans laquelle on range un contenu qui peut être de différentes formes :  un nombre, une chaîne de caractère (ou string)... et bien d'autres formes encore que vous allez découvrir plus tard dans ce cours ! 

On utilise l'opérateur =  pour ranger un objet dans une variable, par exemple : 
cadeau = "bon pour un voyage autour du monde". 
On dit qu'on assigne une valeur ("bon pour un voyage autour du monde") à une variable (cadeau).

On peut effectuer des opérations mathématiques sur des variables contenant des nombres. Par exemple, la variable age_de_ruby suivante :
age_de_ruby = 2015 - annee_de_naissance_ruby  
contiendra la valeur 20  (et oui, Ruby a tout l'avenir devant lui :D).

On peut regrouper des variables contenant des chaînes de caractères à l'aide de l'opérateur +  :  on dit qu'on fait de la concaténation. Par exemple, la variable message  suivante :
message = "Bravo, tu as reçu un " + cadeau + " !" 
contiendra la valeur "Bravo, tu as reçu un bon pour un voyage autour du monde !"


Les tableaux
Les tableaux permettent de ranger des données de façon ordonnée que l'on retrouve à l'aide d'un index. 

Pour créer un tableau, on utilise les crochets, par exemple :

mes_escales_tour_du_monde = [ "Paris", "Toronto", "NYC", "Rio", "Sydney", "Hong-Kong", "Berlin" ]
 Ça vous tente... ? ;)

On peut appliquer des méthodes à une variable contenant un tableau de la façon suivante : 

nom_du_tableau.nom_de_la_methode
La méthode size permet de connaître le nombre d'éléments d'un tableau. Par exemple, pour vérifier combien d'escales je vais faire dans mon tour du monde, je peux taper : 

mes_escales_tour_du_monde.size
 qui renverra la valeur 7. 

La méthode reverse permet d'inverser l'ordre des éléments d'un tableau. Ainsi, si je décide de refaire mon tour du monde dans le sens inverse, je peux faire : 

mes_escales_tour_du_monde.reverse
 qui renverra un tableau contenant Berlin en première escale : ["Berlin","Hong-Kong", ....].

Pour accéder à un élément dans un tableau,  on précise la position (ou index) de l'élément entre crochets. Par exemple, 

mes_escales_tour_du_monde[2]
renverra la ville de "NYC". 

Le premier élément dans un tableau a pour index 0 (et pas 1) ! C'est le cas aussi dans beaucoup de langages de programmation.   

Pour ajouter un élément dans un tableau, on utilise deux chevrons <<. Si je veux prolonger mon tour du monde à Londres, je taperai donc : 

mes_escales_tour_du_monde << "Londres"
Pour modifier l'élément d'un tableau, on lui affecte la valeur souhaitée avec le signe =. Je peux donc remplacer Berlin par Barcelone si je parle mieux l'espagnol que l'allemand :

mes_escales_tour_du_monde[6] = "Barcelone"

Les tables de hashage
Les tables de hashage (ou hashes) permettent de ranger des données que l'on retrouve à l'aide d'une clé.

Pour créer une table de hashage, on utilise des accolades {}. Chaque valeur rangée dans cette table est associée à une clé qui permettra de la retrouver :

table_de_hashage = { clé_1: valeur_1, clé_2: valeur_2, ... }
Par exemple, pour enregistrer le nombre de jours à passer dans chaque escale, je peux créer une table de hashage jours_voyage  : 

jours_voyage = { paris: 0, toronto: 7, nyc: 3 }
Pour accéder à la valeur d'un élément dans un hash, on précise sa clé entre crochets. Si je ne me souviens plus combien de temps j'ai prévu pour mon escale à Toronto, il me suffit d'appeler :

jours_voyage[:toronto]
qui me renverra 7 jours. 

Pour ajouter ou modifier un élément dans un hash, on utilise l'opérateur =. Par exemple en ajoutant :  

jours_voyage[:rio] = 5
mon hash jours_voyage contiendra la durée de mon séjour à Rio en plus : 

{ paris: 0, toronto: 7, nyc: 3, rio: 5 }

BOUCLES :
Pour exécuter un fichier Ruby à partir de la console, placez votre console dans le répertoire contenant le fichier et tapez : 

ruby nom_du_fichier.rb
Une boucle permet d'effectuer des actions répétitives de manière simple à l'aide du mot-clé each , par exemple pour parcourir un tableau ou encore refaire plusieurs fois la même action.

Exemple de boucle pour parcourir un tableau :  

jours_ouvres = [
  "lundi","mardi","mercredi","jeudi","vendredi"
]

i=5

jours_ouvres.each do |jour|
  if jour == "vendredi" 
    puts jour + " : Bon weekend !"
  elsif jour == "lundi"
    puts jour + " : Bon courage !"
  else
    puts jour + " : Weekend dans #{i} jours !"
  end
  i-=1
end
Résultat dans la console : 

lundi : Bon courage ! 
mardi : Weekend dans 4 jours ! 
mercredi : Wekeend dans 3 jours !
jeudi : Weekend dans 2 jours !
vendredi : Bon weekend !
Exemple de boucle de répétition : 

7.times do 
  puts "tourner sa langue"
end
puts "... et parler !"
Résultat dans la console : 

tourner sa langue
tourner sa langue
tourner sa langue
tourner sa langue
tourner sa langue
tourner sa langue
tourner sa langue
... et parler !

Conditions :
On peut ajouter des conditions pour réaliser différentes actions dans Ruby selon le cas à l'aide des mots-clés if, else, elsif : 

if trajet_minutes > 120
  puts "Prends un film avec toi"
elsif trajet_minutes < 5
  puts "Pas le temps de t'asseoir..."
else
  puts "Tu as le temps de lire au moins quelques chapitres d'un bouquin !"
end
On peut combiner des conditions à l'aide des signes &&  (pour "ET") et || (pour "OU"). 

Les booléens sont des variables utiles pour tester si une condition est vraie ou fausse. Dans l'exemple ci-dessous, code_indenté est un booléen qui vaut "true" ou "false". 

if code_indenté
  puts "Bravo, ton code est bien indenté !"
else
  puts "Pense à bien indenter ton code pour améliorer sa lisibilité !"
end
Pour vérifier une condition d'égalité, il faut utiliser deux signes égal (==). Faites attention à ne pas confondre avec le signe égal tout seul (=) qui sert à affecter une valeur à une variable :

age = 18 #range la valeur 18 dans la variable age et renvoie donc 18
age == 18 #booléen qui renvoie True si age vaut 18, False sinon
Voilà, vous avez fait le tour des bases de Ruby, j'espère que ça vous a plu ! Rendez-vous dans la prochaine partie pour passer au niveau supérieur avec la programmation orientée objet.  :)


Les classes sont une notion essentielle de beaucoup de langages de programmation, elles permettent de représenter un type d'objet en modélisant ses caractéristiques : ainsi, les classes sont des "plans" qui servent à créer des objets spécifiques (appelés instances de classes). 

Pour connaître la classe d'un objet de Ruby, il existe une méthodeclass qui s'appelle ainsi :nom_de_l_objet.class. 
Voici quelques exemples de cette méthode :

10.class renvoieFixnum (nombre entier) ;

78.5.class renvoieFloat (nombre décimal) ;

"Bonjour".class renvoieString (chaînes de caractères) ;

etc.

 

Pour créer une classe et lui donner des attributs, on utilise les mots-cléclass etattr_accessor : 

class Eleve
  attr_accessor :prenom, :langage_prefere
end
Attention, toutes les définitions de classe doivent commencer par une majuscule.

class ma_classe 

class maclasse 

… est invalide, il faut écrire

class MaClasse
Si vous ne respectez pas cela, votre classe ne sera pas prise en compte.

Pour créer une instance de classe, on utilise la méthodenew selon la syntaxe suivante :nom_de_l_objet = nom_de_la_classe.new. Puis on spécifie les attributs de l'instance comme ceci : 

bob = Eleve.new
bob.prenom = "Bob"


Une méthode (aussi appelée fonction) est une série d'actions. Elle se définit à l'intérieur d'une classe en commençant par le mot-clé def et se termine par end. 

Une méthode peut prendre un ou plusieurs paramètres d'entrée, ou aucun paramètres. Exemples de méthodes dans une classe : 

class Eleve
  attr_accessor :prenom, :nom, :langage_prefere
  
  #méthode sans paramètre
  def nom_complet 
    prenom + " " + nom
  end
  
  #méthode avec paramètre
  def aime_le(langage)
    if langage == langage_prefere
      "Oui :)"
    else
      "Non :("
    end
  end

end
On applique une méthode à une instance de classe de la façon suivante : nom_de_l_objet.nom_de_la_methode. Si on crée une instance de la classe Eleve ci-dessus, on pourra ainsi écrire : 

jc = Eleve.new
jc.prenom = "John"
jc.nom = "Cleese"
jc.langage_prefere = "Python"

puts "Est-ce que " + jc.nom_complet + " aime le Ruby ?\n" + jc.aime_le("Ruby")
Ce qui donnera le résultat suivant :

Est-ce que John Cleese aime le Ruby ?
Non :(


Pour économiser votre code et le rendre plus maintenable (c'est-à-dire plus facile à mettre à jour), vous pouvez faire hériter des classes qui ont des propriétés communes à partir d'une classe-mère englobant ces propriétés. 

Pour faire hériter une classe d'une classe-mère, on utilise le symbole < dans la définition de la classe : 

class nom_de_la_classe < nom_de_la_classe_mere
    ...

